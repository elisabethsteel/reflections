How did viewing a diff between two versions of a file help you see the bug that was introduced?

It made it easy to compare two files that have a lot of lines by showing
the lines that had changed between the two versions side by side
with a + for lines that were added and a - for lines that were removed
Rather than manually looking through every line that was changed you can 
quickly see the changed lines using diff. 
In the mac terminal type: diff -u old-file-name.txt new-file-name.txt

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You wouldn't have multiple versions of things saved under many different names. 
It gets so confusing when you have tons of files and you can't remember which version is the most recent. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The pros are that you can chose logical points to commit, like after you've made
any significant changes or fixed a bug. You avoid strange commits in the middle
 of a line or middle of fixing a bug. A con is that you might forget to commit
 at a reasonable point and go too long between versions. 

 Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

 Probably to save space. If systems like Google Docs are saving everything every 
 hour then you'll fill up all of your space quickly. 
 Git seems more related to coding too so you're more likely to have files that are linked to one another in a project repository. 

 How can you use the commands git log and git diff to view the history of files?

 In the command line you can type git log --stats to see the history and the stats
 for how many lines were added/removed. 
 If you type git diff -u 'commit id 1' 'commit id 2' it will show you the changes. 
 To get the changes to show up in color type:
 git config --global color.ui auto

 How might using version control make you more confident to make changes that could break something?

There's less to lose because you can just go back to an older version if you make a change 
that breaks something

Now that you have your workspace set up, what do you want to try using Git for?

I'd like to use Git for my code that works with JT datasets
 